
call plug#begin('~/.vim/plugged')

" bookmark
Plug 'MattesGroeger/vim-bookmarks'

" highlight keyword
Plug 'lfv89/vim-interestingwords'

"Plug 'github/copilot.vim'

" hard time
"Plug 'takac/vim-hardtime'

" improve search
" can be replaced by airline, show the search index in right bottom
Plug 'google/vim-searchindex'

" move cursor easier
Plug 'easymotion/vim-easymotion'

" cool line in bottom
Plug 'vim-airline/vim-airline'

" the vim file manager
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }

" tagbar, a overview of classes, functions, variables names
Plug 'majutsushi/tagbar'

" the engine of snippets
Plug 'SirVer/ultisnips'

" Snippets are separated from the engine. This is snippet contents
Plug 'honza/vim-snippets'

" auto completion
Plug 'ycm-core/YouCompleteMe', { 'do': './install.py --go-completer ' }

" surround "'({[
Plug 'tpope/vim-surround'

" repeat
Plug 'tpope/vim-repeat'

" maximal current version
Plug 'szw/vim-maximizer'

" git integration
Plug 'tpope/vim-fugitive'

" dir diff
Plug 'will133/vim-dirdiff'

" line diff
Plug 'andrewradev/linediff.vim'

" fuzzy finder
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'

""" syntax highlight -------------------------------------------------
" TOML
"Plug 'cespare/vim-toml'

" syntax for terraform
Plug 'hashivim/vim-terraform'
"
" protobuf
Plug 'google/protobuf'

" python robot framework
Plug 'mfukar/robotframework-vim'

" syntax for log
Plug 'mtdl9/vim-log-highlighting'

" syntax for helm
Plug 'towolf/vim-helm'

""" code formatter -------------------------------------------------

"" prettier js
"Plug 'prettier/vim-prettier', { 'do': 'npm install' }

"" all in one
"Plug 'google/vim-codefmt'
"Plug 'google/vim-maktaba'
"Plug 'google/vim-codefmt'
"Plug 'google/vim-glaive'

""" language support -------------------------------------------------
" vim go support
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }

" syntax check for python
"Plug 'vim-syntastic/syntastic'
Plug 'psf/black', { 'branch': 'stable' }


call plug#end()

""-------------------------------------------------------- plug setting
"
" YouCompleteMe, C-family Semantic Completion Engine
let g:ycm_global_ycm_extra_conf = '~/.vim/plugged/YouCompleteMe/.ycm_extra_conf.py'
let g:ycm_confirm_extra_conf = 0

" show function preview
let g:ycm_add_preview_to_completeopt = 1

" close function preview when complete
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_autoclose_preview_window_after_completion = 1

" max number of complete menu
let g:ycm_max_num_candidates = 100

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<c-]>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" set tagbar sort by code's order
let g:tagbar_sort = 0
"let g:tagbar_autoclose = 1

""prettier config
"let g:prettier#config#trailing_comma = 'all'
"let g:prettier#config#arrow_parens = 'always'
"
"" vim-go config
let g:go_fmt_command = "goimports"
let g:go_template_autocreate = 0
let g:go_metalinter_enabled = ['vet', 'golint', 'errcheck']

let g:ycm_auto_hover=''
let g:syntastic_check_on_wq = 0

let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']

" rewrite default mapping, because it break google/vim-searchindex
let g:interestingWordsDefaultMappings = 0
nnoremap <silent> <leader>k :call InterestingWords('n')<cr>
vnoremap <silent> <leader>k :call InterestingWords('v')<cr>
nnoremap <silent> <leader>K :call UncolorAllWords()<cr>

"" hardtime
"let g:hardtime_default_on = 1
"let g:hardtime_showmsg = 1
"" make up and down by j k available
"let g:list_of_normal_keys = ["h", "l", "-", "+", "<UP>", "<DOWN>", "<LEFT>", "<RIGHT>"]
"let g:list_of_visual_keys = ["h", "l", "-", "+", "<UP>", "<DOWN>", "<LEFT>", "<RIGHT>"]

"--------------------------------------------------------

" tagbar toggle
nnoremap <F8> :TagbarToggle<CR>

" enable nerdtree
nnoremap <F9> :NERDTreeToggle<CR>

" fzf pen files in vertical split
nnoremap <silent> <Leader>v :call fzf#run({
\   'right': winwidth('.') / 2,
\   'sink':  'vertical botright split' })<CR>
nnoremap <Leader>ff :Files<CR>
nnoremap <Leader>rg :Rg<CR>

" find in directory
" https://stackoverflow.com/questions/59885329/how-to-exclude-file-name-from-fzf-filtering-after-ripgrep-search-results
command! -bang -nargs=* Rg call fzf#vim#grep("rg --column --line-number --no-heading --color=always --smart-case ".shellescape(<q-args>), 1, {'options': '--delimiter : --nth 4..'}, <bang>0)

" YCM improve gd
nnoremap gd :YcmCompleter GoToDefinition<CR>
nnoremap gr :YcmCompleter GoToReferences<CR>

" max current windows
nnoremap <Leader>m :MaximizerToggle<CR>

" fzf
vnoremap <leader>a/ y/<C-R>"<CR>:Rg <C-R>"<CR>


